#!/usr/bin/env ruby

def backup_tracking_branches(tracking_branches)
  return if tracking_branches.empty?
  puts "Saving tracking branches (#{tracking_branches.size})..."

  fbdir = File.join($backupDir, "tracking_branches")
  Dir.mkdir(fbdir)
  tracking_branches.each do |branch, tracked|
    bdir = File.join(fbdir, branch)
    Dir.mkdir(bdir)    
    puts `git format-patch --output-dir=#{bdir} #{tracked}..#{branch}`
  end
end

# TODO for now comparing only with master
def backup_feature_branches(feature_branches)
  return if feature_branches.empty?
  puts "Saving feature branches (#{feature_branches.size})..."

  fbdir = File.join($backupDir, "feature_branches")
  Dir.mkdir(fbdir)
  feature_branches.each do |branch|
    bdir = File.join(fbdir, branch)
    Dir.mkdir(bdir)
    puts `git format-patch --output-dir=#{bdir} master..#{branch}`
  end
end

def backup_local
  puts "Saving local changes..."
  `git diff > #{$backupDir}/unstaged_local_changes.patch`
  `git diff --cached > #{$backupDir}/staged_local_changes.patch`
end

def backup_stash
  numstashes = `git stash list`.chomp.split("\n").size
  return if numstashes == 0

  puts "saving stashes (#{numstashes})..."

  sdir = File.join($backupDir, "stash")
  if File.exists?(sdir) then `rm -rf #{sdir}` end
  Dir.mkdir(sdir)
  numstashes.times do |i|
    num = format("%04d", i)
    `git stash show -p stash@{#{i}} > #{sdir}/#{num}_stash.patch`
  end
end

ENV['PATH'] += ":/opt/local/bin" #TODO: remove, this is for easier debugging only

Dir.chdir "/Users/loki/idea/community" #TODO: remove, this is for easier debugging only

timestamp = Time.now.strftime("%Y-%m-%d-%H-%M-%S")
$backupDir = "/Users/loki/temp/gitbackup_#{timestamp}" #TODO: read from args or env var

puts "Collecting information..."

branches = []
`git branch`.split("\n").each do |line|
  if line.start_with?("* ")
    branches << line[2..-1]
  else 
    branches << line[2..-1]
  end
end

tracking_branches = {}
feature_branches = []

branches.each do | branch|
  remote = `git config branch.#{branch}.remote`.chomp
  rembranch = `git config branch.#{branch}.merge`.chomp
  if not remote.empty? and not rembranch.empty?
    rembranch["refs/heads/"] = ""
    rembranch = remote + "/" + rembranch
    tracking_branches[branch] = rembranch
  else
    feature_branches << branch
  end
end

#puts tracking_branches.inspect
#puts feature_branches

Dir.mkdir($backupDir)

backup_local
backup_tracking_branches(tracking_branches)
backup_feature_branches(feature_branches)
backup_stash
puts "Finished."